<!--! 'random_reverse' property is not supported in this template, vehicles using this template are almost all symmetrical, reversing would do nothing -->

<tal:spritesets repeat="spriteset_data consist.gestalt_graphics.unique_spritesets">
    <!--! spriteset loops got too complex in the templates, with livery, empty state, cargo loading, cargo loaded, and random variants
          so I moved the logic for spritesets into the gestalt, and simply render out all from a list with a trivial loop -->
    spriteset(${vehicle.id}_ss_${spriteset_data[0]}, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name_2('unreversed', spriteset_data[1])}
    }
    <!--! spritegroups aren't used here, direct to spriteset -->
</tal:spritesets>

<!--! I did try consolidating cargo + load + flip into a single switch checking procedures, but it exceeded the 255 limit for varact 2 ranges -->
<tal:load_state repeat="load_state ['loading', 'loaded']">
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_cargo_${load_state}, cargo_type_in_veh) {
        <tal:optimise_out_if_only_1_cargo condition="len(consist.gestalt_graphics.cargo_row_map.items()) > 1">
            <tal:cargos repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
                <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
                    <!--! cargo_row_map provides a list format to support multiple variants for same cargo label, but that is unused currently (June 2020) so just take first item
                          the list could be used to provide random cargo sprites for selected labels, but support for that was unused, and was removed by design in 2020 to speed up compiling
                        -->
                    ${mapping[0]}: return ${vehicle.id}_ss_${load_state}_${mapping[1][0]};
                </tal:exclude_default_cargo>
            </tal:cargos>
        </tal:optimise_out_if_only_1_cargo>
        <!--! generic cargos -->
        return ${vehicle.id}_ss_${load_state}_${consist.gestalt_graphics.generic_rows[0]};
    }
</tal:load_state>

<tal:graphics_with_optional_cover switch="getattr(consist.gestalt_graphics, 'has_cover', False)">
    <tal:no_cover case="False">
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_check_state_unweathered, switch_graphics_visible_cargo_no_cover_percent_loaded()) {
            0: return ${vehicle.id}_ss_empty_unweathered;
            1: return ${vehicle.id}_switch_cargo_loading;
            2: return ${vehicle.id}_switch_cargo_loaded;
        }
    </tal:no_cover>
    <tal:has_cover case="True">
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_check_state_unweathered, switch_graphics_visible_cargo_has_cover()) {
            0: return ${vehicle.id}_ss_has_cover_unweathered;
            1: return ${vehicle.id}_ss_empty_unweathered;
            2: return ${vehicle.id}_switch_cargo_loading;
            3: return ${vehicle.id}_switch_cargo_loaded;
        }
    </tal:has_cover>
</tal:graphics_with_optional_cover>

<!--! weathered graphics are optional, and only used when recoloured sprites are provided in an overlay layer, rather than by CC remapping the default sprite -->
<tal:masked_overlay_graphics condition="consist.gestalt_graphics.add_masked_overlay" switch="getattr(consist.gestalt_graphics, 'has_cover', False)">
    <tal:no_cover case="False">
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_check_state_weathered, switch_graphics_visible_cargo_no_cover_percent_loaded()) {
            0: return ${vehicle.id}_ss_empty_weathered;
            1: return ${vehicle.id}_ss_empty_weathered;
            2: return ${vehicle.id}_ss_empty_weathered;
        }
    </tal:no_cover>
    <tal:has_cover case="True">
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_check_state_weathered, switch_graphics_visible_cargo_has_cover()) {
            0: return ${vehicle.id}_ss_has_cover_weathered;
            1: return ${vehicle.id}_ss_empty_weathered;
            2: return ${vehicle.id}_ss_empty_weathered;
            3: return ${vehicle.id}_ss_empty_weathered;
        }
    </tal:has_cover>
</tal:masked_overlay_graphics>

<tal:weathered_variant condition="len(consist.gestalt_graphics.weathered_variants) > 1">
<!--! ! note that support here is for either ['unweathered'] or ['unweathered', 'weathered'] as only 1 random bit is picked, use more bits if that needs extended in future -->
<!--! this could be parameterised procedure, as it's used for other gestalts also -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_choose_weathered_variant, random_bits_weathered_variant()) {
    <tal:weathered_variants repeat="weathered_variant consist.gestalt_graphics.weathered_variants">
        <!--!${repeat.weathered_variant.index}: return ${vehicle.id}_switch_graphics_vehicle_${weathered_variant};-->
        ${repeat.weathered_variant.index}: return ${vehicle.id}_switch_graphics_vehicle_check_state_${weathered_variant};
    </tal:weathered_variants>
    return ${vehicle.id}_switch_graphics_vehicle_check_state_unweathered; <!--! this default should not be reached in this case, but eh -->
}

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_check_randomisation_strategy, param_wagon_colour_randomisation) {
    0: ${vehicle.id}_switch_graphics_vehicle_check_state_unweathered; <!--! no randomisation -->
    ${vehicle.id}_switch_graphics_vehicle_choose_weathered_variant;
}
</tal:weathered_variant>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, getbits(extra_callback_info1, 8, 8)) {
    <!--! masked overlay is JFDI hard-coded for now -->
    <tal:masked_overlay condition="consist.gestalt_graphics.add_masked_overlay">
        1: ${vehicle.id}_switch_graphics_check_randomisation_strategy;
    </tal:masked_overlay>
    ${vehicle.id}_switch_graphics_vehicle_check_state_unweathered;
}

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${graphics_path}${consist.id}.png") {
    ${consist.get_nml_for_spriteset_template(y_offset=0)}
}
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 1) {
    return ${vehicle.id}_ss_purchase;
}

<tal:include metal:use-macro="load: graphics_entry_switches.pynml" />

<tal:include metal:use-macro="load: capacity.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />
