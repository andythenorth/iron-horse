<!--! Liveries that change depending on one or both of:
      - the 'role' of the engine
      - the major cargo in the consist
      Intended for pax and mail cars, possibly limited other types.
      - liveries are in pairs (livery_1, livery_2)
      - flipping vehicle swaps livery
          - N.B. asymmetric sprites won't reverse when flipped, they maintain same orientation and change livery
          - most sprites are symmetric, except, e.g. brake coaches
      - consist cargos can be checked by label and reference a block of the spritesheet
      - loaded and empty state are same, but loading state is provided (for opening doors at stations)
            - open doors are comped in by the graphics processor
    - see also notes in
 -->

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->
// default graphics chain
<tal:consist_cargo_variants repeat="cargo_variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">

    <tal:user_flipped repeat="flipped ['unflipped', 'flipped']">
        <tal:spritesets define="reversed 'reversed' if flipped == 'flipped' else 'unreversed'">
            spriteset(${vehicle.id}_ss_doors_closed_livery_1_${cargo_variant_num}_${flipped}, "${graphics_path}${consist.id}.png") {
                ${vehicle.get_spriteset_template_name(reversed, flipped, 10 + (cargo_variant_num * 120))}
            }
            spriteset(${vehicle.id}_ss_doors_open_livery_1_${cargo_variant_num}_${flipped}, "${graphics_path}${consist.id}.png") {
                ${vehicle.get_spriteset_template_name(reversed, flipped, 10 + (cargo_variant_num * 120) + 30)}
            }
            spriteset(${vehicle.id}_ss_doors_closed_livery_2_${cargo_variant_num}_${flipped}, "${graphics_path}${consist.id}.png") {
                ${vehicle.get_spriteset_template_name(reversed, flipped, 10 + (cargo_variant_num * 120) + 60)}
            }
            spriteset(${vehicle.id}_ss_doors_open_livery_2_${cargo_variant_num}_${flipped}, "${graphics_path}${consist.id}.png") {
                ${vehicle.get_spriteset_template_name(reversed, flipped, 10 + (cargo_variant_num * 120) + 90)}
            }
        </tal:spritesets>

        <!--! in case there wasn't enough complexity here, let's do pantographs too, in a separate layer -->
        <tal:pantographs condition="consist.pantograph_type is not None">
            <!--! !! the y base offsets here won't work for multi-unit vehicles, they need a different calculation -->
            <tal:pantographs repeat="pantograph_state ['down', 'up']">
                spriteset(${vehicle.id}_ss_pantographs_${pantograph_state}_${cargo_variant_num}_${flipped}, "${graphics_path}${consist.id}_pantographs_${pantograph_state}.png") {
                    ${vehicle.get_spriteset_template_name('reversed' if flipped == 'flipped' else 'unreversed', flipped, 10 + (cargo_variant_num * 60))}
                }
            </tal:pantographs>
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_pantographs_${cargo_variant_num}_${flipped}, ${consist.nml_expression_for_vehicle_is_electrically_powered_by_tile()}) {
                1: return ${vehicle.id}_ss_pantographs_up_${cargo_variant_num}_${flipped};
                return ${vehicle.id}_ss_pantographs_down_${cargo_variant_num}_${flipped};
            }
        </tal:pantographs>

    </tal:user_flipped>
</tal:consist_cargo_variants>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_local_procedure_get_livery_index_from_engine_id, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: return ${repeat.unit_variant.index};
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}

<!--! stupid integer stuffing scheme to detect livery / flip / doors states, see the procedures for the schema -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_check_engine_and_doors,
        [
            STORE_TEMP(${vehicle.id}_switch_local_procedure_get_livery_index_from_engine_id(), ${temp_storage_ids.buyable_variant_num}),
            switch_graphics_consist_specific_livery_check_variant_id()
            + switch_graphics_opening_doors()
            + (1000 * LOAD_TEMP(${temp_storage_ids.consist_specific_livery_variant}))
        ]
    ) {
    <tal:consist_cargo_variants repeat="cargo_variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">
        ${cargo_variant_num}100: return ${vehicle.id}_ss_doors_closed_livery_1_${cargo_variant_num}_unflipped;
        ${cargo_variant_num}101: return ${vehicle.id}_ss_doors_open_livery_1_${cargo_variant_num}_unflipped;
        ${cargo_variant_num}110: return ${vehicle.id}_ss_doors_closed_livery_1_${cargo_variant_num}_flipped;
        ${cargo_variant_num}111: return ${vehicle.id}_ss_doors_open_livery_1_${cargo_variant_num}_flipped;
        ${cargo_variant_num}200: return ${vehicle.id}_ss_doors_closed_livery_2_${cargo_variant_num}_unflipped;
        ${cargo_variant_num}201: return ${vehicle.id}_ss_doors_open_livery_2_${cargo_variant_num}_unflipped;
        ${cargo_variant_num}210: return ${vehicle.id}_ss_doors_closed_livery_2_${cargo_variant_num}_flipped;
        ${cargo_variant_num}211: return ${vehicle.id}_ss_doors_open_livery_2_${cargo_variant_num}_flipped;
    </tal:consist_cargo_variants>
}

<tal:consist_cargo_variants repeat="cargo_variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">
    <tal:conditional_pantograph condition="consist.pantograph_type is not None">
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_pantographs_${cargo_variant_num}, vehicle_is_flipped) {
            1: return ${vehicle.id}_switch_graphics_pantographs_${cargo_variant_num}_flipped;
            return ${vehicle.id}_switch_graphics_pantographs_${cargo_variant_num}_unflipped;
        }
    </tal:conditional_pantograph>
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_layers_${cargo_variant_num},
            [
                STORE_TEMP(${cargo_variant_num}, ${temp_storage_ids.consist_specific_livery_variant}),
                getbits(extra_callback_info1, 8, 8)
            ]
        ){
        0: return ${vehicle.id}_switch_graphics_vehicle_check_engine_and_doors;
        <tal:conditional_pantograph condition="consist.pantograph_type is not None">
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            1: return ${vehicle.id}_switch_graphics_pantographs_${cargo_variant_num};
        </tal:conditional_pantograph>
    }

</tal:consist_cargo_variants>

<tal:position_in_consist repeat="cargo_row_map consist.gestalt_graphics.cargo_row_map.items()">
    <tal:vars define="cargo_label cargo_row_map[0];
                      position_variants consist.gestalt_graphics.get_position_variants_with_keys(cargo_row_map)">
        <!--! rulesets must comply with the position names in gestalt_graphics.consist_positions_ordered
              these could be extended or made arbitrary, but that's unwanted complexity -->
        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'pax_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, switch_graphics_pax_car_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'mail_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, switch_graphics_mail_car_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'railcars_4_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, switch_graphics_railcar_ruleset_4_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'railcars_3_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, switch_graphics_railcar_ruleset_3_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'railcars_2_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, switch_graphics_railcar_ruleset_2_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'driving_cab_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, switch_graphics_driving_cab_car_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'metro'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, switch_graphics_metro_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == None">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, 0) {
                return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>
    </tal:vars>
</tal:position_in_consist>

switch (FEAT_TRAINS, PARENT, ${vehicle.id}_switch_graphics_vehicle_check_cargo, most_common_cargo_type) {
    <tal:cargos repeat="cargo_label consist.gestalt_graphics.cargo_row_map.keys()">
    <!--!  assume that we always want first entry from the cargo's list of spritegroup row nums
           this will be the spritegroup row num for the 'default' vehicle graphical variant -->
        <tal:exclude_default_cargo condition="cargo_label != 'DFLT'">
            ${cargo_label}: return ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label};
        </tal:exclude_default_cargo>
    </tal:cargos>
    return ${vehicle.id}_switch_graphics_position_in_consist_entry_point_DFLT;
}

<!--! (conditional) stuff any temp storages needed for use with the alt_var_41 magic -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle,
    <tal:fill_temp_storage condition="consist.equivalent_ids_alt_var_41 is not None">switch_initialise_alt_var_41(${','.join([str(id) for id in consist.equivalent_ids_alt_var_41])})</tal:fill_temp_storage>
    <tal:no_fill_temp_storage condition="consist.equivalent_ids_alt_var_41 is None">1</tal:no_fill_temp_storage>
    ) {
    return ${vehicle.id}_switch_graphics_vehicle_check_cargo;
}

// buy menu graphics chain
<!--! hard-coded to: automatic default, then 2 manual liveries -->
<tal:unit_variants repeat="unit_variant vehicle.unit_variants">
    spriteset(${vehicle.id}_ss_vehicle_purchase_${unit_variant.buyable_variant.buyable_variant_num}, "${graphics_path}${consist.id}.png") {
        <tal:automagic_default_variant condition="unit_variant.buyable_variant.buyable_variant_num == 0">
            ${consist.get_nml_for_spriteset_template(y_offset=vehicle.buy_menu_spriterow_num * 30)}
        </tal:automagic_default_variant>
        <tal:other_variants condition="unit_variant.buyable_variant.buyable_variant_num != 0">
            ${consist.get_nml_for_spriteset_template(y_offset=(unit_variant.buyable_variant.buyable_variant_num - 1) * 60)}
        </tal:other_variants>
    }
</tal:unit_variants>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_purchase, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: return ${vehicle.id}_ss_vehicle_purchase_${unit_variant.buyable_variant.buyable_variant_num};
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}
<tal:conditional_pantographs switch="consist.pantograph_type is not None">
    <tal:has_pantographs case="True">
        <!--! purchase sprites for case where pantograph layer is needed -->
        spriteset(${vehicle.id}_ss_pantograph_purchase, "${graphics_path}${consist.id}_pantographs_down.png") {
            ${consist.get_nml_for_spriteset_template(y_offset=0)}
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_set_layers_register_more_sprites_purchase, STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)) {
            return ${vehicle.id}_switch_graphics_vehicle_purchase;
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, getbits(extra_callback_info1, 8, 8)) {
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            0: return ${vehicle.id}_switch_set_layers_register_more_sprites_purchase;
            1: return ${vehicle.id}_ss_pantograph_purchase;
        }
    </tal:has_pantographs>
    <tal:no_pantographs case="False">
        <!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
              when there is nothing specific, then this is just a null switch -->
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
            0: return ${vehicle.id}_switch_graphics_vehicle_purchase;
        }
    </tal:no_pantographs>
</tal:conditional_pantographs>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties_vehicle.pynml" />

