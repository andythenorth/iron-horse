<tal:spritesets condition="railtype.use_custom_sprites">
    spriteset (spriteset_${railtype.id}_gui, "${graphics_path}/railtypes/${railtype.id}.png") {
        template_gui(10,760)
    }

    spriteset (spriteset_${railtype.id}_track_overlay, "${graphics_path}/railtypes/${railtype.id}.png") {
        template_track_overlay(10,20)
    }

    spriteset (spriteset_${railtype.id}_underlay, "${graphics_path}/railtypes/${railtype.id}.png") {
        template_underlay(10,60)
    }

    spriteset (spriteset_${railtype.id}_tunnels, "${graphics_path}/railtypes/${railtype.id}.png") {
        template_tunnels(330,460)
    }

    spriteset (spriteset_${railtype.id}_bridge_surfaces, "${graphics_path}/railtypes/${railtype.id}.png") {
        template_bridge_surfaces(10,300)
    }

    spriteset (spriteset_${railtype.id}_level_crossings_open, "${graphics_path}/railtypes/${railtype.id}.png") {
        template_bridge_level_crossings_track(10,630)
        template_bridge_level_crossings_light(10,430)
    }
    spriteset (spriteset_${railtype.id}_level_crossings_closed, "${graphics_path}/railtypes/${railtype.id}.png") {
        template_bridge_level_crossings_track(10,630)
        template_bridge_level_crossings_light(170,430)
    }
    switch (FEAT_RAILTYPES, SELF, switch_${railtype.id}_level_crossings, level_crossing_status) {
        LEVEL_CROSSING_CLOSED: spriteset_${railtype.id}_level_crossings_closed;
        spriteset_${railtype.id}_level_crossings_open;
    }

    spriteset (spriteset_${railtype.id}_depot, "${graphics_path}/railtypes/${railtype.id}.png") {
        template_depots(10,890)
    }
</tal:spritesets>

if (param_add_railtypes) {
    if (railtype_available("${railtype.label}") || (loading_stage == LOADING_STAGE_RESERVE)) {
        item (FEAT_RAILTYPES, item_${railtype.id}) {
            property {
                label:                          "${railtype.label}";
                <tal:introduction_date condition="railtype.introduction_date is not None">
                    introduction_date:              date(${railtype.introduction_date});
                </tal:introduction_date>
                railtype_flags:                 bitmask(${",".join(railtype.railtype_flags)});
                curve_speed_multiplier:         ${railtype.curve_speed_multiplier};
                speed_limit:                    ${railtype.speed_limit};
                acceleration_model:             ACC_MODEL_RAIL;
                construction_cost:              ${railtype.construction_cost};
                maintenance_cost:               ${railtype.maintenance_cost};
                map_colour:                     ${railtype.map_colour};
                compatible_railtype_list:       ${railtype.make_nml_railtype_list(railtype.compatible_railtype_list)};
                powered_railtype_list:          ${railtype.make_nml_railtype_list(railtype.powered_railtype_list)};
                alternative_railtype_list:      ${railtype.make_nml_railtype_list(railtype.alternative_railtype_list)};
                station_graphics:               RAILTYPE_STATION_NORMAL;
                name:                           string(STR_RAILTYPE_${railtype.id.upper()}_NAME);
                menu_text:                      string(STR_RAILTYPE_${railtype.id.upper()}_MENU_TEXT);
                build_window_caption:           string(STR_RAILTYPE_${railtype.id.upper()}_BUILD_WINDOW_CAPTION);
                autoreplace_text:               string(STR_RAILTYPE_${railtype.id.upper()}_AUTOREPLACE_TEXT);
                new_engine_text:                string(STR_RAILTYPE_${railtype.id.upper()}_NEW_ENGINE_TEXT);
                toolbar_caption:                string(STR_RAILTYPE_${railtype.id.upper()}_TOOLBAR_CAPTION);
            }
            <tal:graphics condition="railtype.use_custom_sprites">
                graphics {
                    gui:                        spriteset_${railtype.id}_gui;
                    track_overlay:              spriteset_${railtype.id}_track_overlay;
                    underlay:                   spriteset_${railtype.id}_underlay;
                    tunnels:                    spriteset_${railtype.id}_tunnels;
                    //catenary_wire:
                    //catenary_pylons
                    bridge_surfaces:            spriteset_${railtype.id}_bridge_surfaces;
                    level_crossings:            switch_${railtype.id}_level_crossings;
                    depots:						spriteset_${railtype.id}_depot;
                    //fences:
                    //tunnel_overlay:
                    <tal:signals condition="railtype.use_custom_signals">
                        signals:                    switch_signals;
                    </tal:signals>
                }
            </tal:graphics>
        }
    }
    <!--! make this type compatible with RAIL / ELRL as required -->
    <tal:extend_RAIL condition="railtype.extends_RAIL">
        item (FEAT_RAILTYPES, item_RAIL) {
            property {
                label:                          "RAIL";
                compatible_railtype_list:       ["${railtype.label}"];
                powered_railtype_list:          ["${railtype.label}"];
            }
        }
    </tal:extend_RAIL>
    <tal:extend_ELRL condition="railtype.extends_ELRL">
        item (FEAT_RAILTYPES, item_ELRL) {
            property {
                label:                          "ELRL";
                compatible_railtype_list:       ["${railtype.label}"];
                powered_railtype_list:          ["${railtype.label}"];
            }
        }
    </tal:extend_ELRL>
}
