<!--! this is the default template for trains that don't supply their own template -->

<!--! convenience declaration of a global for shorthand (oof) -->
<tal:global_alternative_cc_livery define="global alternative_cc_livery consist.gestalt_graphics.alternative_cc_livery" />

<!--! 'reversed' is random reversal on construction, depending on vehicle random bits
      'flipped' is user flipping vehicle in depot
      don't conflate them :) -->
<tal:random_reverse_variants repeat="reversed_variant consist.reversed_variants">
    <tal:user_flipped repeat="flipped ['unflipped', 'flipped']">
        <!--! all_liveries inserts 'default' livery, before any alternative_cc_livery so we can just do one repeat over all needed spritesets -->
        <tal:liveries repeat="livery consist.gestalt_graphics.all_liveries">
            spriteset(${vehicle.id}_ss_${reversed_variant}_${flipped}_${repeat.livery.index}, "${graphics_path}${consist.id}.png") {
                ${vehicle.get_spriteset_template_name(reversed_variant, flipped, 10 + (repeat.livery.index * 30) + (vehicle.spriterow_num * len(consist.gestalt_graphics.all_liveries) * 30))}
            }
            <!--! check for *excluded* 2cc liveries
                  only do this if there are cc1 liveries, otherwise this switch will never be reached -->
            <tal:block condition="len(livery['cc1']) > 0">
                switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_check_2cc_${reversed_variant}_${flipped}, company_colour2) {
                    <tal:livery_not_cc2_mapping repeat="livery_not_cc2_mapping livery['not_cc2']">
                        ${livery_not_cc2_mapping}: return ${vehicle.id}_ss_${reversed_variant}_${flipped}_0;
                    </tal:livery_not_cc2_mapping>
                    return ${vehicle.id}_ss_${reversed_variant}_${flipped}_${repeat.livery.index};
                }
            </tal:block>
        </tal:liveries>

        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_livery_${reversed_variant}_${flipped}, company_colour1) {
            <tal:alt_livery condition="alternative_cc_livery is not None">
                <tal:livery_cc1_mapping repeat="cc1_livery_mapping alternative_cc_livery['cc1']">
                    ${cc1_livery_mapping}: return ${vehicle.id}_switch_graphics_check_2cc_${reversed_variant}_${flipped};
                </tal:livery_cc1_mapping>
            </tal:alt_livery>
            return ${vehicle.id}_ss_${reversed_variant}_${flipped}_0;
        }

        <tal:pantographs condition="consist.pantograph_type is not None">
            <!--! !! the y base offsets here won't work for multi-unit vehicles, they need a different calculation -->
            <tal:pantographs repeat="pantograph_state ['down', 'up']">
                spriteset(${vehicle.id}_ss_pantographs_${pantograph_state}_${reversed_variant}_${flipped}, "${graphics_path}${consist.id}_pantographs_${pantograph_state}.png") {
                    ${vehicle.get_spriteset_template_name(reversed_variant, flipped, 10 + (vehicle.spriterow_num * 30))}
                }
            </tal:pantographs>
            <!--! assumes RAIL / ELRL, deal with that later if it's a problem later -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_pantographs_${reversed_variant}_${flipped}, ${consist.get_nml_expression_for_tile_powers_railtype()}) {
                1: return ${vehicle.id}_ss_pantographs_up_${reversed_variant}_${flipped};
                return ${vehicle.id}_ss_pantographs_down_${reversed_variant}_${flipped};
            }
        </tal:pantographs>

        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_layers_${reversed_variant}_${flipped}, getbits(extra_callback_info1, 8, 8)) {
            <tal:conditional_pantograph condition="consist.pantograph_type is not None">
                <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                      but we need to reserve layer 1 for the pantographs -->
                1: return ${vehicle.id}_switch_graphics_pantographs_${reversed_variant}_${flipped};
            </tal:conditional_pantograph>
            return ${vehicle.id}_switch_graphics_livery_${reversed_variant}_${flipped};
        }
    </tal:user_flipped>

    <!--! handle user flipped state -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${reversed_variant}, vehicle_is_flipped) {
        1: return ${vehicle.id}_switch_graphics_vehicle_layers_${reversed_variant}_flipped;
        return ${vehicle.id}_switch_graphics_vehicle_layers_${reversed_variant}_unflipped;
    }
</tal:random_reverse_variants>

<!--! as of Dec 2019 articulated vehicles don't provide random variants, as they can't be flipped, and no other random variations exist
      that means SELF can be checked without worrying about random bits from lead unit of articulated vehicle
      however if articulated vehicle support is need this switch will need to also checking FORWARD_SELF(n)
      location_of_random_bits_for_random_variant can be used for that -->
random_switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle) {
    <tal:random_graphics_variations repeat="reversed_variant consist.reversed_variants">
        1: return ${vehicle.id}_switch_graphics_${reversed_variant};
    </tal:random_graphics_variations>
}

// buy menu graphics chain
<!--! all_liveries inserts 'default' livery, before any alternative_cc_livery so we can just do one repeat over all needed spritesets -->
<tal:liveries repeat="livery consist.gestalt_graphics.all_liveries">
spriteset(${vehicle.id}_ss_vehicle_purchase_${repeat.livery.index}, "${graphics_path}${consist.id}.png") {
    ${consist.get_nml_for_spriteset_template(y_offset=repeat.livery.index * 30)}
}
</tal:liveries>

<!--! check for *excluded* 2cc liveries
      only do this if there is an alternative cc livery, otherwise this switch will never be reached -->
<tal:alt_livery condition="alternative_cc_livery is not None">
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase_livery_check_2cc, company_colour2) {
        <tal:livery_not_cc2_mapping repeat="livery_not_cc2_mapping alternative_cc_livery['not_cc2']">
            ${livery_not_cc2_mapping}: return ${vehicle.id}_ss_vehicle_purchase_0;
        </tal:livery_not_cc2_mapping>
        return ${vehicle.id}_ss_vehicle_purchase_1;
    }
</tal:alt_livery>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase_livery, company_colour1) {
    <tal:alt_livery condition="alternative_cc_livery is not None">
        <tal:livery_cc1_mapping repeat="cc1_livery_mapping alternative_cc_livery['cc1']">
            ${cc1_livery_mapping}: return ${vehicle.id}_switch_graphics_purchase_livery_check_2cc;
        </tal:livery_cc1_mapping>
    </tal:alt_livery>
    return ${vehicle.id}_ss_vehicle_purchase_0;
}

<tal:conditional_pantographs switch="consist.pantograph_type is not None">
    <tal:has_pantographs case="True">
        <!--! purchase sprites for case where pantograph layer is needed -->
        spriteset(${vehicle.id}_ss_pantograph_purchase, "${graphics_path}${consist.id}_pantographs_down.png") {
            ${consist.get_nml_for_spriteset_template(y_offset=0)}
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_set_layers_register_more_sprites_purchase, STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)) {
            return ${vehicle.id}_switch_graphics_purchase_livery;
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, getbits(extra_callback_info1, 8, 8)) {
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            0: return ${vehicle.id}_switch_set_layers_register_more_sprites_purchase;
            1: return ${vehicle.id}_ss_pantograph_purchase;
        }
    </tal:has_pantographs>
    <tal:no_pantographs case="False">
        <!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
              when there is nothing specific, then this is just a null switch -->
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
            return ${vehicle.id}_switch_graphics_purchase_livery;
        }
    </tal:no_pantographs>
</tal:conditional_pantographs>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<!--! dedicated colour remapping with rules against specific cc1 colours-->

<!--! check for *excluded* 2cc liveries
      only do this if there are cc1 liveries, otherwise this switch will never be reached -->
<tal:alt_livery condition="alternative_cc_livery is not None">
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping_check_2cc, company_colour2) {
        <tal:livery_not_cc2_mapping repeat="livery_not_cc2_mapping alternative_cc_livery['not_cc2']">
            ${livery_not_cc2_mapping}: return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
        </tal:livery_not_cc2_mapping>
        return palette_2cc(${alternative_cc_livery['remap_to_cc'] if alternative_cc_livery['remap_to_cc'] is not None else 'company_colour1'}, company_colour2);
    }
</tal:alt_livery>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping, company_colour1) {
    <tal:alt_livery condition="alternative_cc_livery is not None">
        <tal:livery_cc1_mapping repeat="cc1_livery_mapping alternative_cc_livery['cc1']">
            ${cc1_livery_mapping}: return ${vehicle.id}_switch_colour_mapping_check_2cc;
        </tal:livery_cc1_mapping>
    </tal:alt_livery>
    return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties_vehicle.pynml" />

