<!--! this is the default template for trains that don't supply their own template -->

<!--! 'reversed' is random reversal on construction, depending on vehicle random bits -->
<tal:random_reverse_variants repeat="reversed_variant consist.reversed_variants">
    <!--! all_liveries inserts 'default' livery, before any alternative_cc_livery so we can just do one repeat over all needed spritesets -->
    <tal:liveries repeat="livery consist.gestalt_graphics.all_liveries">
        spriteset(${vehicle.id}_ss_${reversed_variant}_${repeat.livery.index}, "${graphics_path}${consist.id}.png") {
            ${vehicle.get_spriteset_template_name_2(reversed_variant, 10 + (repeat.livery.index * 30) + (vehicle.spriterow_num * len(consist.gestalt_graphics.all_liveries) * 30))}
        }
    </tal:liveries>

    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_livery_${reversed_variant}, vehicle_type_id) {
        <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
            ${unit_variant.numeric_id}: return ${vehicle.id}_ss_${reversed_variant}_${unit_variant.livery_num};
        </tal:unit_variants>
        <!--! no default, by design all variants should be explicitly found -->
    }

    <tal:pantographs condition="consist.pantograph_type is not None">
        <!--! !! the y base offsets here won't work for multi-unit vehicles, they need a different calculation -->
        <tal:pantographs repeat="pantograph_state ['down', 'up']">
            spriteset(${vehicle.id}_ss_pantographs_${pantograph_state}_${reversed_variant}, "${graphics_path}${consist.id}_pantographs_${pantograph_state}.png") {
                ${vehicle.get_spriteset_template_name_2(reversed_variant, 10 + (vehicle.spriterow_num * 30))}
            }
        </tal:pantographs>
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_pantographs_${reversed_variant}, ${consist.nml_expression_for_vehicle_is_electrically_powered_by_tile()}) {
            1: return ${vehicle.id}_ss_pantographs_up_${reversed_variant};
            return ${vehicle.id}_ss_pantographs_down_${reversed_variant};
        }
    </tal:pantographs>

    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${reversed_variant}, getbits(extra_callback_info1, 8, 8)) {
        <tal:conditional_pantograph condition="consist.pantograph_type is not None">
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs -->
            1: return ${vehicle.id}_switch_graphics_pantographs_${reversed_variant};
        </tal:conditional_pantograph>
        return ${vehicle.id}_switch_graphics_livery_${reversed_variant};
    }
</tal:random_reverse_variants>

<tal:switch_random_reverse_variants switch="len(consist.reversed_variants) > 1">
    <tal:has_random_reverse_variant case="True">
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, random_bits_reversed_engine()) {
            <tal:random_graphics_variations repeat="reversed_variant consist.reversed_variants">
                ${repeat.reversed_variant.index}: return ${vehicle.id}_switch_graphics_${reversed_variant};
            </tal:random_graphics_variations>
        }
    </tal:has_random_reverse_variant>
    <tal:no_random_reverse_variant case="False">
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, 0) {
            return ${vehicle.id}_switch_graphics_${consist.reversed_variants[0]};
        }
    </tal:no_random_reverse_variant>
</tal:switch_random_reverse_variants>


// buy menu graphics chain
<!--! all_liveries inserts 'default' livery, before any alternative_cc_livery so we can just do one repeat over all needed spritesets -->
<tal:liveries repeat="livery consist.gestalt_graphics.all_liveries">
spriteset(${vehicle.id}_ss_vehicle_purchase_${repeat.livery.index}, "${graphics_path}${consist.id}.png") {
    ${consist.get_nml_for_spriteset_template(y_offset=repeat.livery.index * 30)}
}
</tal:liveries>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_purchase, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: return ${vehicle.id}_ss_vehicle_purchase_${unit_variant.livery_num};
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}

<tal:conditional_pantographs switch="consist.pantograph_type is not None">
    <tal:has_pantographs case="True">
        <!--! purchase sprites for case where pantograph layer is needed -->
        spriteset(${vehicle.id}_ss_pantograph_purchase, "${graphics_path}${consist.id}_pantographs_down.png") {
            ${consist.get_nml_for_spriteset_template(y_offset=0)}
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_set_layers_register_more_sprites_purchase, STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)) {
            return ${vehicle.id}_switch_graphics_vehicle_purchase;
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, getbits(extra_callback_info1, 8, 8)) {
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            0: return ${vehicle.id}_switch_set_layers_register_more_sprites_purchase;
            1: return ${vehicle.id}_ss_pantograph_purchase;
        }
    </tal:has_pantographs>
    <tal:no_pantographs case="False">
        <!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
              when there is nothing specific, then this is just a null switch -->
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
            return ${vehicle.id}_switch_graphics_vehicle_purchase;
        }
    </tal:no_pantographs>
</tal:conditional_pantographs>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<!--! dedicated colour remapping with rules against specific cc2 colours-->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        <tal:livery define="livery consist.gestalt_graphics.all_liveries[repeat.unit_variant.index]">
            <tal:optional_forced_recolour switch="livery.get('remap_to_cc', None) is not None">
                <tal:block case="True">
                    <!--! recolour CC2 to arbitrary other CC as defined by livery -->
                    ${unit_variant.numeric_id}: palette_2cc(${livery['remap_to_cc']}, company_colour1);
                </tal:block>
                <tal:block case="False">
                    <!--! apply regular 1CC and 2CC -->
                    ${unit_variant.numeric_id}: base_sprite_2cc + 16 * company_colour2 + company_colour1;
                </tal:block>
            </tal:optional_forced_recolour>
        </tal:livery>
    </tal:unit_variants>
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties_vehicle.pynml" />

