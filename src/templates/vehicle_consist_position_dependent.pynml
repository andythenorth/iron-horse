<!--! Appearance that changes depending on position in consist.
      Intended for pax and mail cars, possibly limited other types.
      - loaded and empty state are same, but loading state is provided (for opening doors at stations)
      - open doors are comped in by the graphics processor
      - most sprites are symmetric, except, e.g. brake coaches; if vehicle is flipped, any asymmetric sprite will be flipped
 -->

<!--! 'random_reverse' property is not supported in this template
      'flipped' is user flipping vehicle in depot and *is* supported here, don't conflate them :) -->
// default graphics chain
<tal:consist_position_variants repeat="position_variant_num python:range(consist.gestalt_graphics.total_position_variants)">
    <tal:base_liveries repeat="base_livery_num range(consist.gestalt_graphics.num_spritesheet_liveries_per_position_variant)">
        // cabbage ${consist.gestalt_graphics.num_spritesheet_liveries_per_position_variant}
        spriteset(${vehicle.id}_ss_doors_closed_position_variant_${position_variant_num}_base_livery_${base_livery_num}, "${graphics_path}${consist.id}.png") {
            ${vehicle.get_spriteset_template_name_2('unreversed', 10 + (position_variant_num * consist.gestalt_graphics.num_spritesheet_liveries_per_position_variant * 60) + (base_livery_num * 60))}
        }
        spriteset(${vehicle.id}_ss_doors_open_position_variant_${position_variant_num}_base_livery_${base_livery_num}, "${graphics_path}${consist.id}.png") {
            ${vehicle.get_spriteset_template_name_2('unreversed', 10 + (position_variant_num * consist.gestalt_graphics.num_spritesheet_liveries_per_position_variant * 60) + (base_livery_num * 60) + 30)}
        }
    </tal:base_liveries>
    <!--! in case there wasn't enough complexity here, let's do pantographs too, in a separate layer -->
    <tal:pantographs condition="consist.pantograph_type is not None">
        <!--! !! the y base offsets here won't work for multi-unit vehicles, they need a different calculation -->
        <tal:pantographs repeat="pantograph_state ['down', 'up']">
            spriteset(${vehicle.id}_ss_pantographs_${pantograph_state}_${position_variant_num}, "${graphics_path}${consist.id}_pantographs_${pantograph_state}.png") {
                ${vehicle.get_spriteset_template_name_2('unreversed', 10 + (position_variant_num * 60))}
            }
        </tal:pantographs>
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_pantographs_${position_variant_num}, ${consist.nml_expression_for_vehicle_is_electrically_powered_by_tile()}) {
            1: return ${vehicle.id}_ss_pantographs_up_${position_variant_num};
            return ${vehicle.id}_ss_pantographs_down_${position_variant_num};
        }
    </tal:pantographs>
</tal:consist_position_variants>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_local_procedure_get_unit_variant_num, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: return ${unit_variant.buyable_variant.buyable_variant_num};
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}

<!--! stupid integer stuffing scheme to detect livery / flip / doors states, see the procedures for the schema -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_check_engine_and_doors,
        [
            (100 * LOAD_TEMP(${temp_storage_ids.consist_specific_position_variant_num}))
            +
            (10 * ${vehicle.id}_switch_local_procedure_get_unit_variant_num())
            +
            (1 * switch_graphics_opening_doors())
        ]
    ) {
    <tal:consist_position_variants repeat="position_variant_num python:range(consist.gestalt_graphics.total_position_variants)">
        <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
            ${position_variant_num}${unit_variant.buyable_variant.buyable_variant_num}0: return ${vehicle.id}_ss_doors_closed_position_variant_${position_variant_num}_base_livery_${unit_variant.buyable_variant.relative_spriterow_num};
            ${position_variant_num}${unit_variant.buyable_variant.buyable_variant_num}1: return ${vehicle.id}_ss_doors_open_position_variant_${position_variant_num}_base_livery_${unit_variant.buyable_variant.relative_spriterow_num};
        </tal:unit_variants>
    </tal:consist_position_variants>
}

<tal:consist_position_variants repeat="position_variant_num python:range(consist.gestalt_graphics.total_position_variants)">
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_layers_${position_variant_num},
            [
                STORE_TEMP(${position_variant_num}, ${temp_storage_ids.consist_specific_position_variant_num}),
                getbits(extra_callback_info1, 8, 8)
            ]
        ){
        0: return ${vehicle.id}_switch_graphics_vehicle_check_engine_and_doors;
        <tal:conditional_pantograph condition="consist.pantograph_type is not None">
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            1: return ${vehicle.id}_switch_graphics_pantographs_${position_variant_num};
        </tal:conditional_pantograph>
    }

</tal:consist_position_variants>

<tal:vars define="position_variants consist.gestalt_graphics.spriterow_group_mappings">
    <tal:switch_position_ruleset switch="consist.gestalt_graphics.consist_ruleset">
        <!--! rulesets must comply with the position names in gestalt_graphics
              these could be extended or made arbitrary, but that's unwanted complexity -->
        <tal:position_ruleset case="'pax_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_pax_car_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'mail_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_mail_car_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'railcars_4_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_railcar_ruleset_4_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'railcars_3_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_railcar_ruleset_3_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'railcars_2_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_railcar_ruleset_2_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'driving_cab_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_driving_cab_car_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'metro'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_metro_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="None">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, 0) {
                return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>
    </tal:switch_position_ruleset>
</tal:vars>

<!--! (conditional) stuff any temp storages needed for use with the alt_var_41 magic -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle,
    <tal:fill_temp_storage condition="consist.equivalent_ids_alt_var_41 is not None">switch_initialise_alt_var_41(${','.join([str(id) for id in consist.equivalent_ids_alt_var_41])})</tal:fill_temp_storage>
    <tal:no_fill_temp_storage condition="consist.equivalent_ids_alt_var_41 is None">1</tal:no_fill_temp_storage>
    ) {
    return ${vehicle.id}_switch_graphics_position_in_consist_entry_point;
}

// buy menu graphics chain
<tal:unit_variants repeat="unit_variant vehicle.unit_variants">
    spriteset(${vehicle.id}_ss_vehicle_purchase_${unit_variant.buyable_variant.buyable_variant_num}, "${graphics_path}${consist.id}.png") {
        <!--! note the weird jank to handle articulated the y position of buy menu sprites
              it's easier for the buy menu sprite generator to place them where it places them, then deal with it here -->
        ${consist.get_nml_for_spriteset_template(y_offset=unit_variant.buyable_variant.relative_spriterow_num * (30 if consist.buy_menu_x_loc == 360 else 60))}
    }
</tal:unit_variants>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_purchase, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: return ${vehicle.id}_ss_vehicle_purchase_${unit_variant.buyable_variant.buyable_variant_num};
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}
<tal:conditional_pantographs switch="consist.pantograph_type is not None">
    <tal:has_pantographs case="True">
        <!--! purchase sprites for case where pantograph layer is needed -->
        spriteset(${vehicle.id}_ss_pantograph_purchase, "${graphics_path}${consist.id}_pantographs_down.png") {
            ${consist.get_nml_for_spriteset_template(y_offset=0)}
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_set_layers_register_more_sprites_purchase, STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)) {
            return ${vehicle.id}_switch_graphics_vehicle_purchase;
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, getbits(extra_callback_info1, 8, 8)) {
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            0: return ${vehicle.id}_switch_set_layers_register_more_sprites_purchase;
            1: return ${vehicle.id}_ss_pantograph_purchase;
        }
    </tal:has_pantographs>
    <tal:no_pantographs case="False">
        <!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
              when there is nothing specific, then this is just a null switch -->
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
            0: return ${vehicle.id}_switch_graphics_vehicle_purchase;
        }
    </tal:no_pantographs>
</tal:conditional_pantographs>

<tal:include metal:use-macro="load: graphics_entry_switches.pynml" />

<!--!
    dedicated colour remapping for CC, as defined by the livery, no flip support
-->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        <tal:forced_remap switch="unit_variant.buyable_variant.livery.get('remap_to_cc', None) is not None">
            <tal:remap case="True">
                ${unit_variant.numeric_id}: return base_sprite_2cc + 16 * ${unit_variant.buyable_variant.livery.remap_to_cc['company_colour2']} + ${unit_variant.buyable_variant.livery.remap_to_cc['company_colour1']};
            </tal:remap>
            <tal:no_remap case="False">
                ${unit_variant.numeric_id}:return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
            </tal:no_remap>
        </tal:forced_remap
    </tal:unit_variants>
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

