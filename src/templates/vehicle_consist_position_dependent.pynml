<!--! Appearance that changes depending on position in consist.
      Intended for pax and mail cars, possibly limited other types.
      - loaded and empty state are same, but loading state is provided (for opening doors at stations)
      - open doors are comped in by the graphics processor
      - most sprites are symmetric, except, e.g. brake coaches; if vehicle is flipped in depot, any asymmetric sprite will be flipped
 -->

// default graphics chain
<tal:consist_position_variants repeat="position_variant_num python:range(consist.gestalt_graphics.total_position_variants)">
    <tal:base_liveries repeat="base_livery_num range(consist.gestalt_graphics.num_spritesheet_liveries_per_position_variant)">
        spriteset(${vehicle.id}_ss_doors_closed_position_variant_${position_variant_num}_base_livery_${base_livery_num}, "${graphics_path}${consist.id}.png") {
            ${vehicle.get_spriteset_template_name('unreversed', 10 + (position_variant_num * consist.gestalt_graphics.num_spritesheet_liveries_per_position_variant * 60) + (base_livery_num * 60))}
        }
        spriteset(${vehicle.id}_ss_doors_open_position_variant_${position_variant_num}_base_livery_${base_livery_num}, "${graphics_path}${consist.id}.png") {
            ${vehicle.get_spriteset_template_name('unreversed', 10 + (position_variant_num * consist.gestalt_graphics.num_spritesheet_liveries_per_position_variant * 60) + (base_livery_num * 60) + 30)}
        }
    </tal:base_liveries>
    <!--! in case there wasn't enough complexity here, let's do pantographs too, in a separate layer -->
    <tal:pantographs condition="consist.pantograph_type is not None">
        <!--! !! the y base offsets here won't work for multi-unit vehicles, they need a different calculation -->
        <tal:pantographs repeat="pantograph_state ['down', 'up']">
            spriteset(${vehicle.id}_ss_pantographs_${pantograph_state}_${position_variant_num}, "${graphics_path}${consist.id}_pantographs_${pantograph_state}.png") {
                ${vehicle.get_spriteset_template_name('unreversed', 10 + (position_variant_num * 30))}
            }
        </tal:pantographs>
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_pantographs_state_${position_variant_num}, ${consist.nml_expression_for_vehicle_is_electrically_powered_by_tile()}) {
            1: return ${vehicle.id}_ss_pantographs_up_${position_variant_num};
            return ${vehicle.id}_ss_pantographs_down_${position_variant_num};
        }
        <!--! some vehicles don't show pans if the OpenTTD consist is not powered
              this isn't very sophisticated as of Feb 2024, it literally just checks if engine (cab cars) are in the conist, doesn't check for contiguous chain -->
        switch (FEAT_TRAINS, PARENT, ${vehicle.id}_switch_graphics_pantographs_${position_variant_num},
            [
                <!--! OR because if the consist doesn't use the suppression flag, we always show pans -->
                ${int(not consist.suppress_pantograph_if_no_engine_attached)}
                <tal:has_cab_consist condition="getattr(consist, 'cab_consist', None) is not None">
                    ||
                    <tal:cabs repeat="unit_variant consist.cab_consist.units[0].unit_variants">
                        count_veh_id(${unit_variant.id}) > 0
                        <tal:OR condition="not:repeat.unit_variant.end">
                            ||
                        </tal:OR>
                    </tal:cabs>
                </tal:has_cab_consist>
            ]
        ) {
            1: return ${vehicle.id}_switch_graphics_pantographs_state_${position_variant_num};
            return ss_global_empty_vehicle;
        }
    </tal:pantographs>
</tal:consist_position_variants>

<tal:unit_variants repeat="unit_variant vehicle.unit_variants">
    <!--! stupid integer stuffing scheme to detect livery / flip / doors states, see the procedures for the schema
          this does *not* try to handle variant ID in the same switch - that approach was removed as it caused concurrent varact2 IDs to be exhausted with higher numbers of buyabl variants -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_check_engine_and_doors_variant_relative_spriterow_num_${unit_variant.buyable_variant.relative_spriterow_num},
            [
                (10 * LOAD_TEMP(${temp_storage_ids.consist_specific_position_variant_num}))
                +
                (1 * switch_graphics_opening_doors())
            ]
        ) {
        <tal:consist_position_variants repeat="position_variant_num python:range(consist.gestalt_graphics.total_position_variants)">
            ${position_variant_num}0: return ${vehicle.id}_ss_doors_closed_position_variant_${position_variant_num}_base_livery_${unit_variant.buyable_variant.relative_spriterow_num};
            ${position_variant_num}1: return ${vehicle.id}_ss_doors_open_position_variant_${position_variant_num}_base_livery_${unit_variant.buyable_variant.relative_spriterow_num};
        </tal:consist_position_variants>
    }
</tal:unit_variants>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_check_engine_and_doors, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: return ${vehicle.id}_switch_graphics_vehicle_check_engine_and_doors_variant_relative_spriterow_num_${unit_variant.buyable_variant.relative_spriterow_num};
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}

<tal:consist_position_variants repeat="position_variant_num python:range(consist.gestalt_graphics.total_position_variants)">
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_layers_${position_variant_num},
            [
                STORE_TEMP(${position_variant_num}, ${temp_storage_ids.consist_specific_position_variant_num}),
                getbits(extra_callback_info1, 8, 8)
            ]
        ){
        0: return ${vehicle.id}_switch_graphics_vehicle_check_engine_and_doors;
        <tal:conditional_pantograph condition="consist.pantograph_type is not None">
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            1: return ${vehicle.id}_switch_graphics_pantographs_${position_variant_num};
        </tal:conditional_pantograph>
    }

</tal:consist_position_variants>

<tal:vars define="position_variants consist.gestalt_graphics.spriterow_group_mappings">
    <tal:switch_position_ruleset switch="consist.gestalt_graphics.consist_ruleset">
        <!--! rulesets must comply with the position names in gestalt_graphics
              these could be extended or made arbitrary, but that's unwanted complexity -->
        <tal:position_ruleset case="'pax_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_pax_car_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'mail_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_mail_car_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'railcars_6_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_railcar_ruleset_6_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'railcars_4_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_railcar_ruleset_4_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'railcars_3_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_railcar_ruleset_3_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'railcars_2_unit_sets'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_railcar_ruleset_2_unit_sets()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'tgv'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_tgv_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'driving_cab_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_driving_cab_car_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['default']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="'metro'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, switch_graphics_metro_ruleset()) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['first']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['last']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset case="None">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point, 0) {
                return ${vehicle.id}_switch_graphics_vehicle_layers_${position_variants['special']};
            }
        </tal:position_ruleset>
    </tal:switch_position_ruleset>
</tal:vars>

<!--! (conditional) stuff any temp storages needed for use with the var_41_but_badges_not_ids magic -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle,
    <tal:fill_temp_storage condition="consist.vehicle_family_badge is not None">switch_initialise_var_41_but_badges_not_ids(badgetype("${consist.vehicle_family_badge}"))</tal:fill_temp_storage>
    <tal:no_fill_temp_storage condition="consist.vehicle_family_badge is None">1</tal:no_fill_temp_storage>
    ) {
    return ${vehicle.id}_switch_graphics_position_in_consist_entry_point;
}

// buy menu graphics chain
<tal:unit_variants repeat="unit_variant vehicle.unit_variants">
    spriteset(${vehicle.id}_ss_vehicle_purchase_${unit_variant.buyable_variant.buyable_variant_num}, "${graphics_path}${consist.id}.png") {
        <!--! note the weird jank to handle articulated the y position of buy menu sprites
              it's easier for the buy menu sprite generator to place them where it places them, then deal with it here -->
        <tal:buy_menu_sprite_switch_case switch="consist.requires_custom_buy_menu_sprite">
            <tal:case case="True">
                <!--! custom buy menu sprites are generated in the order required for the variants in buy menu, and are in consecutive spriterows -->
                ${consist.get_nml_for_spriteset_template(y_offset=unit_variant.buyable_variant.buyable_variant_num * 30)}
            </tal:case>
            <tal:case case="False">
                <!--! non-custom buy menu sprites use a specific relative_spriterow_num and need to skip a row to account for door states -->
                ${consist.get_nml_for_spriteset_template(y_offset=unit_variant.buyable_variant.relative_spriterow_num * 60)}
            </tal:case>
        </tal:buy_menu_sprite_switch_case>
    }
</tal:unit_variants>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_purchase, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        ${unit_variant.numeric_id}: return ${vehicle.id}_ss_vehicle_purchase_${unit_variant.buyable_variant.buyable_variant_num};
    </tal:unit_variants>
    <!--! no default, by design all variants should be explicitly found -->
}
<tal:conditional_pantographs switch="(consist.pantograph_type is not None) and (not consist.suppress_pantograph_if_no_engine_attached)">
    <tal:has_pantographs case="True">
        <!--! purchase sprites for case where pantograph layer is needed -->
        spriteset(${vehicle.id}_ss_pantograph_purchase, "${graphics_path}${consist.id}_pantographs_down.png") {
            ${consist.get_nml_for_spriteset_template(y_offset=0)}
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_set_layers_register_more_sprites_purchase, STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)) {
            return ${vehicle.id}_switch_graphics_vehicle_purchase;
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, getbits(extra_callback_info1, 8, 8)) {
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            0: return ${vehicle.id}_switch_set_layers_register_more_sprites_purchase;
            1: return ${vehicle.id}_ss_pantograph_purchase;
        }
    </tal:has_pantographs>
    <tal:no_pantographs case="False">
        <!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
              when there is nothing specific, then this is just a null switch -->
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
            0: return ${vehicle.id}_switch_graphics_vehicle_purchase;
        }
    </tal:no_pantographs>
</tal:conditional_pantographs>

<tal:include metal:use-macro="load: graphics_entry_switches.pynml" />

<!--!
    dedicated colour remapping for CC, as defined by the livery, no flip support
-->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping, vehicle_type_id) {
    <tal:unit_variants repeat="unit_variant vehicle.unit_variants">
        <tal:forced_remap switch="unit_variant.buyable_variant.livery.get('remap_to_cc', None) is not None">
            <tal:remap case="True">
                ${unit_variant.numeric_id}: return base_sprite_2cc + 16 * ${unit_variant.buyable_variant.livery.remap_to_cc['company_colour2']} + ${unit_variant.buyable_variant.livery.remap_to_cc['company_colour1']};
            </tal:remap>
            <tal:no_remap case="False">
                ${unit_variant.numeric_id}:return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
            </tal:no_remap>
        </tal:forced_remap
    </tal:unit_variants>
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

