<!--! 'reversed' is random reversal on construction, depending on vehicle random bits
      'flipped' is user flipping vehicle in depot
      don't conflate them :) -->


// graphics chain for vehicle platform and masked overlay
<tal:spritesets repeat="spriteset_data consist.gestalt_graphics.unique_spritesets">
    <!--! spriteset loops got too complex in the templates, with livery, empty state, cargo loading, cargo loaded, and random variants
          so I moved the logic for spritesets into the gestalt, and simply render out all from a list with a trivial loop -->
    spriteset(${vehicle.id}_ss_${spriteset_data[0]}_${spriteset_data[1]}, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name('unreversed', spriteset_data[1], spriteset_data[2])}
    }
    <!--! spritegroups aren't used here, direct to spriteset -->
</tal:spritesets>

<tal:spritelayer_vehicle_layers repeat="vehicle_spritelayer_name consist.gestalt_graphics.vehicle_spritelayer_names">
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_${vehicle_spritelayer_name}_position_in_consist_entry_point,
        [
            switch_graphics_automobile_transporter_ruleset_${consist.gestalt_graphics.consist_ruleset}()
            + (10 * vehicle_is_flipped)
        ]
    ) {
        <tal:flip_state repeat="flip_state ['unflipped', 'flipped']">
            <tal:position_ruleset repeat="position_variant consist.gestalt_graphics.position_variants">
                ${repeat.position_variant.index + (10 if flip_state == 'flipped' else 0)}: ${vehicle.id}_ss_${vehicle_spritelayer_name}_${position_variant}_${flip_state};
            </tal:position_ruleset>
        </tal:flip_state>
    }
</tal:spritelayer_vehicle_layers>

<tal:spritelayer_cargo_layers repeat="platform_type consist.spritelayer_cargo_layers">
    <!--! load state is assumed (for simplicity) to be all or nothing - any cargo = full load of automobile cargos -->
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_spritelayer_cargos_check_cargo_count_${platform_type}, cargo_count) {
            0: return ss_global_empty;
        return switch_spritelayer_cargos_${spritelayer_cargos.automobiles.AutomobilesSpritelayerCargo().base_id}_${platform_type}_${4 * vehicle.vehicle_length}px;
    }

    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_spritelayer_cargos_${platform_type}, [
                         STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100), <!--! note requirement to pass along 'more sprites' flag here -->
                         STORE_TEMP(1, ${temp_storage_ids.unreversible_spritelayer_cargos})
                        ]) {
        return ${vehicle.id}_switch_graphics_spritelayer_cargos_check_cargo_count_${platform_type};
    }
</tal:spritelayer_cargo_layers>

// switch layers: base platform / spritelayer cargo
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, getbits(extra_callback_info1, 8, 8)) {
    0: return ${vehicle.id}_switch_graphics_base_platform_position_in_consist_entry_point;
    1: return ${vehicle.id}_switch_graphics_spritelayer_cargos_${consist.spritelayer_cargo_layers[0]};
    <tal:optional_masked_overlay condition="consist.gestalt_graphics.add_masked_overlay">
        2: return ${vehicle.id}_switch_graphics_masked_overlay_position_in_consist_entry_point;
    </tal:optional_masked_overlay>
    <tal:optional_upper_deck condition="len(consist.spritelayer_cargo_layers) == 2">
        3: return ${vehicle.id}_switch_graphics_spritelayer_cargos_${consist.spritelayer_cargo_layers[1]};
    </tal:optional_upper_deck>
}


// buy menu graphics chain
spriteset(${vehicle.id}_ss_vehicle_purchase, "${graphics_path}${consist.id}.png") {
    ${consist.get_nml_for_spriteset_template(y_offset=0)}
}
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    0: return ${vehicle.id}_ss_vehicle_purchase;
}

<tal:include metal:use-macro="load: graphics_entry_switches.pynml" />

<!--!
    dedicated colour remapping for CC, with user flip support but, no randomisation
    note that this will return incorrect results if used in purchase list, make sure it's not called by handling purchase_colour_mapping explicitly
-->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_colour_mapping, vehicle_is_flipped) {
    1: return base_sprite_2cc + 16 * company_colour1 + company_colour2; <!--! swap 1CC and 2CC -->
    return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />


