<!--! ** Various strategies for random recolouring of vehicles / intermodal containers ** -->

<!--! * Shared colour sets with variants of CC, may be used by multiple strategies -->
<!--! note that random bits need to be unique within the switch chain to prevent dependent results -->
<tal:colour_sets define="colour_sets {'dark_blue': ['COLOUR_DARK_BLUE', 'custom_dark_blue'],
                                      'pale_green': ['COLOUR_PALE_GREEN', 'custom_pale_green'],
                                      'pink': ['COLOUR_PINK', 'custom_dark_pink'],
                                      'yellow': ['COLOUR_YELLOW', 'custom_dark_yellow'],
                                      'red': ['COLOUR_RED', 'custom_dark_red'],
                                      'light_blue': ['COLOUR_LIGHT_BLUE', 'custom_light_blue'],
                                      'green': ['COLOUR_GREEN', 'custom_green'],
                                      'dark_green': ['COLOUR_DARK_GREEN', 'custom_dark_green'],
                                      'blue': ['COLOUR_BLUE', 'custom_blue'],
                                      'cream': ['COLOUR_CREAM', 'custom_dark_cream'],
                                      'mauve': ['COLOUR_MAUVE', 'custom_light_mauve'],
                                      'purple': ['COLOUR_PURPLE', 'custom_light_purple'],
                                      'orange': ['COLOUR_ORANGE', 'custom_dark_orange'],
                                      'brown': ['COLOUR_BROWN', 'custom_dark_brown'],
                                      'grey': ['COLOUR_GREY', 'custom_dark_grey'],
                                      'white': ['COLOUR_WHITE', 'custom_dark_white'],
                                       }">
    <tal:colour_set repeat="colour_set colour_sets.items()">
        <!--! uses 1 random bit from self, just 2 colour choices, more is overkill and often looks bad -->
        switch (FEAT_TRAINS, SELF, switch_colour_set_${colour_set[0]}_1cc, random_bits_colour_set()) {
            1: return ${utils.unpack_colour(colour_set[1][1], 1)};
            return ${utils.unpack_colour(colour_set[1][0], 1)};
        }
        switch (FEAT_TRAINS, SELF, switch_colour_set_${colour_set[0]}_2cc, random_bits_colour_set()) {
            1: return ${utils.unpack_colour(colour_set[1][1], 2)};
            return ${utils.unpack_colour(colour_set[1][0], 2)};
        }
    </tal:colour_set>
</tal:colour_sets>


<!--! * Strategies for random recolouring of wagons *
    1. strategies apply rules to branch to colour sets, which apply a random choice from 2 shades of the chosen colour (as of Nov 2020)
    2. player parameter can choose certain strategies explicitly
    3. magic may or may not get added for engine-specific or cargo-specific colours
-->

<!--! as of Dec 2019 this was not used with articulated vehicles,
      Â¿ however as of August 2022 type D (articulated) wagons appear to use this so eh, maybe it got extended? -->

<tal:switch_by_company_colour repeat="cc [['1cc', '2cc'], ['1cc', '1cc'], ['2cc', '1cc'], ['2cc', '2cc']]">
    switch (FEAT_TRAINS, SELF, switch_by_company_colour_${cc[0]}_to_${cc[1]},
                        <!--!  if wagon use_wagon_base_colour_parameter is true, then use colour from parameter param_wagon_base_colour_[n] -->
                        LOAD_TEMP(${temp_storage_ids.use_wagon_base_colour_parameter}) == 0
                            ? company_colour${cc[1][0]}
                            : param_wagon_base_colour_${cc[1][0]}) {
        COLOUR_DARK_BLUE: switch_colour_set_dark_blue_${cc[0]};
        COLOUR_PALE_GREEN: switch_colour_set_pale_green_${cc[0]};
        COLOUR_PINK: switch_colour_set_pink_${cc[0]};
        COLOUR_YELLOW: switch_colour_set_yellow_${cc[0]};
        COLOUR_RED: switch_colour_set_red_${cc[0]};
        COLOUR_LIGHT_BLUE: switch_colour_set_light_blue_${cc[0]};
        COLOUR_GREEN: switch_colour_set_green_${cc[0]};
        COLOUR_DARK_GREEN: switch_colour_set_dark_green_${cc[0]};
        COLOUR_BLUE: switch_colour_set_blue_${cc[0]};
        COLOUR_CREAM: switch_colour_set_cream_${cc[0]};
        COLOUR_MAUVE: switch_colour_set_mauve_${cc[0]};
        COLOUR_PURPLE: switch_colour_set_purple_${cc[0]};
        COLOUR_ORANGE: switch_colour_set_orange_${cc[0]};
        COLOUR_BROWN: switch_colour_set_brown_${cc[0]};
        COLOUR_GREY: switch_colour_set_grey_${cc[0]};
        COLOUR_WHITE: switch_colour_set_white_${cc[0]};
    }
</tal:switch_by_company_colour>

<tal:strategy_randomise_base_colour repeat="cc [['1cc', '2cc'], ['2cc', '1cc']]">
    <!--! note that random bits need to be unique within the switch chain to prevent dependent results -->
    switch (FEAT_TRAINS, SELF, switch_strategy_randomise_base_colour_${cc[0]}_unflipped, random_bits_base_colour()) {
        1: switch_by_company_colour_${cc[0]}_to_${cc[1]};
        switch_by_company_colour_${cc[0]}_to_${cc[0]};
    }
    switch (FEAT_TRAINS, SELF, switch_strategy_randomise_base_colour_${cc[0]}_flipped, random_bits_base_colour()) {
        1: switch_by_company_colour_${cc[0]}_to_${cc[0]};
        switch_by_company_colour_${cc[0]}_to_${cc[1]};
    }
</tal:strategy_randomise_base_colour>

<tal:switch_by_company_colour_no_randomisation repeat="cc ['1cc', '2cc']">
    switch (FEAT_TRAINS, SELF, switch_by_company_colour_no_randomisation_${cc},
                        <!--!  if wagon use_wagon_base_colour_parameter is true, then use colour from parameter param_wagon_base_colour_[n] -->
                        LOAD_TEMP(${temp_storage_ids.use_wagon_base_colour_parameter}) == 0
                            ? company_colour${cc[0]}
                            : param_wagon_base_colour_${cc[0]} - 1) {
        <!--! !! Note that whilst the switch checks the correct 1cc / 2cc vars, the returned palette forces both 1cc and 2cc indiscriminately
                 This could be done with more complex templating, but eh -->
        COLOUR_DARK_BLUE: return palette_2cc(COLOUR_DARK_BLUE, COLOUR_DARK_BLUE);
        COLOUR_PALE_GREEN: return palette_2cc(COLOUR_PALE_GREEN, COLOUR_PALE_GREEN);
        COLOUR_PINK: return palette_2cc(COLOUR_PINK, COLOUR_PINK);
        COLOUR_YELLOW: return palette_2cc(COLOUR_YELLOW, COLOUR_YELLOW);
        COLOUR_RED: return palette_2cc(COLOUR_RED, COLOUR_RED);
        COLOUR_LIGHT_BLUE: return palette_2cc(COLOUR_LIGHT_BLUE, COLOUR_LIGHT_BLUE);
        COLOUR_GREEN: return palette_2cc(COLOUR_GREEN, COLOUR_GREEN);
        COLOUR_DARK_GREEN: return palette_2cc(COLOUR_DARK_GREEN, COLOUR_DARK_GREEN);
        COLOUR_BLUE: return palette_2cc(COLOUR_BLUE, COLOUR_BLUE);
        COLOUR_CREAM: return palette_2cc(COLOUR_CREAM, COLOUR_CREAM);
        COLOUR_MAUVE: return palette_2cc(COLOUR_MAUVE, COLOUR_MAUVE);
        COLOUR_PURPLE: return palette_2cc(COLOUR_PURPLE, COLOUR_PURPLE);
        COLOUR_ORANGE: return palette_2cc(COLOUR_ORANGE, COLOUR_ORANGE);
        COLOUR_BROWN: return palette_2cc(COLOUR_BROWN, COLOUR_BROWN);
        COLOUR_GREY: return palette_2cc(COLOUR_GREY, COLOUR_GREY);
        COLOUR_WHITE: return palette_2cc(COLOUR_WHITE, COLOUR_WHITE);
    }
</tal:switch_by_company_colour_no_randomisation>

<tal:strategy_no_randomisation>
    switch (FEAT_TRAINS, SELF, switch_strategy_no_randomisation_1cc_unflipped, 0) {
        switch_by_company_colour_no_randomisation_1cc;
    }
    switch (FEAT_TRAINS, SELF, switch_strategy_no_randomisation_1cc_flipped, 0) {
        switch_by_company_colour_no_randomisation_2cc;
    }
    switch (FEAT_TRAINS, SELF, switch_strategy_no_randomisation_2cc_unflipped, 0) {
        switch_by_company_colour_no_randomisation_2cc;
    }
    switch (FEAT_TRAINS, SELF, switch_strategy_no_randomisation_2cc_flipped, 0) {
        switch_by_company_colour_no_randomisation_1cc;
    }
</tal:strategy_no_randomisation>

<tal:select_strategy_from_param repeat="cc [['1cc', 'unflipped', '1cc'], ['1cc', 'flipped', '2cc'], ['2cc', 'unflipped', '2cc'], ['2cc', 'flipped', '1cc']]">
    switch (FEAT_TRAINS, SELF, switch_select_randomisation_strategy_${cc[0]}_${cc[1]},
                <!--! fiddly ternary check if the wagon type forces a strategy that over-rides the parameter option
                      wagon types can only be 'less random' than the parameter option, never 'more random'
                      ternary assumes that the strategy number decreases in line with degree of randomness, with 0 as 'fully random' -->
                LOAD_TEMP(${temp_storage_ids.auto_colour_randomisation_strategy_num}) <= param_wagon_colour_randomisation_strategy
                    ? param_wagon_colour_randomisation_strategy
                    : LOAD_TEMP(${temp_storage_ids.auto_colour_randomisation_strategy_num})) {
        1: switch_by_company_colour_${cc[0]}_to_${cc[2]};
        2: switch_strategy_no_randomisation_${cc[0]}_${cc[1]};
        switch_strategy_randomise_base_colour_${cc[0]}_${cc[1]};
    }
</tal:select_strategy_from_param>

switch (FEAT_TRAINS, SELF, switch_cc_num_to_randomise, LOAD_TEMP(${temp_storage_ids.cc_num_to_randomise})) {
    1: switch_select_randomisation_strategy_1cc_unflipped;
    2: switch_select_randomisation_strategy_2cc_unflipped;
}
<!--! invert cc1 / cc2 choice if flipped -->
switch (FEAT_TRAINS, SELF, switch_cc_num_to_randomise_flipped, LOAD_TEMP(${temp_storage_ids.cc_num_to_randomise})) {
    1: switch_select_randomisation_strategy_1cc_flipped;
    2: switch_select_randomisation_strategy_2cc_flipped;
}

switch (FEAT_TRAINS, SELF, switch_colour_mapping, cc_num_to_randomise, auto_colour_randomisation_strategy_num, use_wagon_base_colour_parameter,
                                                    [STORE_TEMP(cc_num_to_randomise, ${temp_storage_ids.cc_num_to_randomise}),
                                                     STORE_TEMP(auto_colour_randomisation_strategy_num, ${temp_storage_ids.auto_colour_randomisation_strategy_num}),
                                                     STORE_TEMP(use_wagon_base_colour_parameter, ${temp_storage_ids.use_wagon_base_colour_parameter}),
                                                     vehicle_is_flipped]) {
    1: switch_cc_num_to_randomise_flipped;
    switch_cc_num_to_randomise;
}

<!--! purchase cb doesn't appear to support checking flipped var (didn't test this thoroughly, might be wrong), so provide dedicated purchase entry point switch -->
switch (FEAT_TRAINS, SELF, switch_colour_mapping_purchase, cc_num_to_randomise, auto_colour_randomisation_strategy_num, use_wagon_base_colour_parameter,
                                                    [STORE_TEMP(cc_num_to_randomise, ${temp_storage_ids.cc_num_to_randomise}),
                                                     STORE_TEMP(auto_colour_randomisation_strategy_num, ${temp_storage_ids.auto_colour_randomisation_strategy_num}),
                                                     STORE_TEMP(use_wagon_base_colour_parameter, ${temp_storage_ids.use_wagon_base_colour_parameter})]) {
    return switch_cc_num_to_randomise;
}


<!--! * Strategies for random recolouring of intermodal containers * -->

<!--!  these are rudimentary in that
       1. they won't recolour within the container group, only between wagons
       2. only 1cc is recoloured due to combinatorial explosion if both 1cc and 2cc are randomised in recolour sprites (those sprites _could_ be generated though)
       3. I didn't check if the random bits used to choose colour set collide with any other uses
       4. this works for train wagons, wouldn't work for ships as individual containers can't be controlled
-->

<!--!! possibly it would be better better to
     - generate box containers for all the CC variants directly in Polar Fox, including the alternative shade for every company colour
     - then compose those into fixed container groups in Iron Horse (cc1_alt etc), so each group produces 16 colour variants
     - then switch the final sprites on the company current colour
     - seems like work, but it's what ships will probably need to do?
     - would non-trivially complicate generating intermodal container spritesets etc
     - also would remove randomisation from non-box containers
     - so basically, unappealing-->
<!--!<tal:switch_by_company_colour repeat="cc [['1cc', '2cc'], ['1cc', '1cc'], ['2cc', '1cc'], ['2cc', '2cc']]">-->
<tal:switch_by_company_colour repeat="cc [['1cc', '1cc']]">
    switch (FEAT_TRAINS, SELF, switch_intermodal_by_company_colour_${cc[0]}_to_${cc[1]}, company_colour${cc[1][0]}) {
        COLOUR_DARK_BLUE: switch_colour_set_dark_blue_${cc[0]};
        COLOUR_PALE_GREEN: switch_colour_set_pale_green_${cc[0]};
        COLOUR_PINK: switch_colour_set_pink_${cc[0]};
        COLOUR_YELLOW: switch_colour_set_yellow_${cc[0]};
        COLOUR_RED: switch_colour_set_red_${cc[0]};
        COLOUR_LIGHT_BLUE: switch_colour_set_light_blue_${cc[0]};
        COLOUR_GREEN: switch_colour_set_green_${cc[0]};
        COLOUR_DARK_GREEN: switch_colour_set_dark_green_${cc[0]};
        COLOUR_BLUE: switch_colour_set_blue_${cc[0]};
        COLOUR_CREAM: switch_colour_set_cream_${cc[0]};
        COLOUR_MAUVE: switch_colour_set_mauve_${cc[0]};
        COLOUR_PURPLE: switch_colour_set_purple_${cc[0]};
        COLOUR_ORANGE: switch_colour_set_orange_${cc[0]};
        COLOUR_BROWN: switch_colour_set_brown_${cc[0]};
        COLOUR_GREY: switch_colour_set_grey_${cc[0]};
        COLOUR_WHITE: switch_colour_set_white_${cc[0]};
    }
</tal:switch_by_company_colour>


<!--! * Strategy for forcing express intermodal to match cargo sprinter * -->

<!--! this doesn't strictly belong in here as it's not random, but it's a convenient location for this niche case
      it's also not a procedure, it's just a switch yielding a result-->
switch (FEAT_TRAINS, SELF, intermodal_car_switch_colour_mapping_not_a_cargo_sprinter, vehicle_is_flipped) {
    1: return base_sprite_2cc + 16 * company_colour1 + company_colour2; <!--! swap 1CC and 2CC -->
    return base_sprite_2cc + 16 * company_colour2 + company_colour1; <!--! apply regular 1CC and 2CC -->
}
<!--! check parent engine ID to see if company colour should be forced to match -->
switch (FEAT_TRAINS, PARENT, intermodal_car_switch_colour_mapping_force_if_cargo_sprinter, vehicle_type_id) {
    <!--! this doesn't check grfid currently - add later if needed -->
    <tal:cargo_sprinter_ids repeat="engine_id roster_manager.cargo_sprinter_ids">
        <!--! apply regular 1CC and 2CC - note that this _should_ take the PARENT scope for those values -->
        ${engine_id}: base_sprite_2cc + 16 * company_colour2 + company_colour1;
    </tal:cargo_sprinter_ids>
    return intermodal_car_switch_colour_mapping_not_a_cargo_sprinter;
}
