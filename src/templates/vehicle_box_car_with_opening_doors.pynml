<!--! box cars that have doors closed when empty / loaded, and doors open when loading -->

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->

<tal:weathered_variants repeat="weathered_variant consist.gestalt_graphics.weathered_variants">
    // default graphics chain
    spriteset(${vehicle.id}_ss_${weathered_variant}_doors_closed, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name_2('unreversed', 10 + (vehicle.spriterow_num * 30) + (repeat.weathered_variant.index * 60))}
    }
    spriteset(${vehicle.id}_ss_${weathered_variant}_doors_open, "${graphics_path}${consist.id}.png") {
        ${vehicle.get_spriteset_template_name_2('unreversed', 10 + (vehicle.spriterow_num * 30) + (repeat.weathered_variant.index * 60) + 30)}
    }

    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_${weathered_variant},
            [switch_graphics_opening_doors()]) {
        <!--! stupid integer stuffing scheme to detect flip / doors states, see the procedures for the schema -->
        0: return ${vehicle.id}_ss_${weathered_variant}_doors_closed;
        1: return ${vehicle.id}_ss_${weathered_variant}_doors_open;
    }
</tal:weathered_variants>

<!--! ! note that support here is for either ['unweathered'] or ['unweathered', 'weathered'] as only 1 random bit is picked, use more bits if that needs extended in future -->
<!--! this could be parameterised procedure, as it's used for other gestalts also -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_choose_weathered_variant, random_bits_weathered_variant()) {
    <tal:weathered_variants repeat="weathered_variant consist.gestalt_graphics.weathered_variants">
        ${repeat.weathered_variant.index}: return ${vehicle.id}_switch_graphics_vehicle_${weathered_variant};
    </tal:weathered_variants>
    return ${vehicle.id}_switch_graphics_vehicle_unweathered; <!--! this default should not be reached in this case, but eh -->
}

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, param_wagon_colour_randomisation_strategy) {
    2: ${vehicle.id}_switch_graphics_vehicle_unweathered; <!--! no randomisation -->
    ${vehicle.id}_switch_graphics_vehicle_choose_weathered_variant;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${graphics_path}${consist.id}.png") {
    ${consist.get_nml_for_spriteset_template(y_offset=0)}
}

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      when there is nothing specific, then this is just a null switch -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_ss_purchase;
}

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties_vehicle.pynml" />

