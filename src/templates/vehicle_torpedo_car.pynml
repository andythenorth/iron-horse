<!--!
    For the specific case of 3-unit articulated vehicle with cargo on the middle unit, and first/last units mirrored.
    Simpler to write a dedicated template than add more complexity to vehicle_with_visible_cargo template.
-->

<!--! plan

    - spriteset first - 1 row
    - spritesets middle - 3 rows, empty / loading / loaded states
    - spriteset last - 1st row, reversed
    - switch for position in articulated consist
        - var position_in_articulated_veh
    - switch for empty / loading / loaded if middle unit
    - purchase menu sprite (hand-drawn, or make a gestalt for this that uses buy menu sprite generator??)
        - ideally automate it
-->

<!--! spriteset first -->
spriteset(${vehicle.id}_ss_first_unit, "${graphics_path}${consist.id}.png") {
    ${vehicle.get_spriteset_template_name_2('unreversed', 10)}
}
<!--! spriteset last - uses first row, reversed -->
spriteset(${vehicle.id}_ss_last_unit, "${graphics_path}${consist.id}.png") {
    ${vehicle.get_spriteset_template_name_2('reversed', 10)}
}
spriteset(${vehicle.id}_ss_middle_unit_empty, "${graphics_path}${consist.id}.png") {
    ${vehicle.get_spriteset_template_name_2('unreversed', 40)}
}
spriteset(${vehicle.id}_ss_middle_unit_loading, "${graphics_path}${consist.id}.png") {
    ${vehicle.get_spriteset_template_name_2('unreversed', 70)}
}
spriteset(${vehicle.id}_ss_middle_unit_loaded, "${graphics_path}${consist.id}.png") {
    ${vehicle.get_spriteset_template_name_2('unreversed', 100)}
}


<!--! spritegroups aren't needed here, the loading state is calculated explicitly -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_percent_loaded, cargo_count*100/cargo_capacity) {
        0: return ${vehicle.id}_ss_middle_unit_empty;
        1..99: return ${vehicle.id}_ss_middle_unit_loading;
    return ${vehicle.id}_ss_middle_unit_loaded;
}

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, position_in_articulated_veh) {
    0: return ${vehicle.id}_ss_first_unit;
    1: return ${vehicle.id}_switch_graphics_percent_loaded;
    2: return ${vehicle.id}_ss_last_unit;
}

// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${graphics_path}${consist.id}.png") {
    ${consist.get_nml_for_spriteset_template(y_offset=0)}
}
<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      when there is nothing specific, then this is just a null switch -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_ss_purchase;
}

<tal:include metal:use-macro="load: graphics_entry_switches.pynml" />

<tal:include metal:use-macro="load: capacity.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />
